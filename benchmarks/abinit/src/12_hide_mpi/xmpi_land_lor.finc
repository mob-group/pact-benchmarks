!{\src2tex{textfont=tt}}
!!****f* ABINIT/xmpi_land_log0d
!! NAME
!!  xmpi_land_log0d
!!
!! FUNCTION
!!  Logical OR accross the nodes.
!!  Combines value from all processes and distribute the result back to all processes.
!!  Target: logical scalar 
!!
!! SOURCE

subroutine xmpi_land_log0d(xval, comm)


!This section has been created automatically by the script Abilint (TD).
!Do not modify the following lines by hand.
#undef ABI_FUNC
#define ABI_FUNC 'xmpi_land_log0d'
!End of the abilint section

 implicit none


!Arguments ------------------------------------
 logical,intent(inout) :: xval
 integer,intent(in) :: comm

#ifdef HAVE_MPI
!Local variables-------------------------------
 integer :: ierr
 logical :: out_val

! *************************************************************************

 if (comm /= MPI_COMM_SELF .and. comm /= MPI_COMM_NULL) then
   call MPI_ALLREDUCE(xval, out_val, 1, MPI_LOGICAL, MPI_LAND, comm, ierr)
   xval = out_val
 end if
#endif

end subroutine xmpi_land_log0d
!!***

!----------------------------------------------------------------------

!!****f* ABINIT/xmpi_lor_log1d
!! NAME
!!  xmpi_lor_log1d
!!
!! FUNCTION
!!  Combines values from all processes and distribute
!!  the result back to all processes.
!!  Target: one-dimensional logical arrays.
!!
!! INPUTS
!!  comm= MPI communicator
!!
!! SIDE EFFECTS
!!  xval= buffer array
!!
!! SOURCE

subroutine xmpi_lor_log1d(xval,comm)


!This section has been created automatically by the script Abilint (TD).
!Do not modify the following lines by hand.
#undef ABI_FUNC
#define ABI_FUNC 'xmpi_lor_log1d'
!End of the abilint section

 implicit none


!Arguments ------------------------------------
 integer,intent(in) :: comm
 logical, DEV_CONTARRD intent(inout) :: xval(:)

!Local variables-------------------------------
#if defined HAVE_MPI
 integer :: ierr,n1
 logical,allocatable :: xsum(:)
#endif

! *************************************************************************

#if defined HAVE_MPI
 if (comm /= MPI_COMM_SELF .and. comm /= MPI_COMM_NULL) then
!  Accumulate xval on all proc. in comm
   n1 = size(xval)
   ABI_STAT_ALLOCATE(xsum,(n1), ierr)
   if (ierr/= 0) call xmpi_abort(msg='error allocating xsum in xmpi_lor_log1d')
   call MPI_ALLREDUCE(xval,xsum,n1,MPI_LOGICAL,MPI_LOR,comm,ierr)
   xval (:) = xsum(:)
   ABI_DEALLOCATE(xsum)
 end if
#endif

end subroutine xmpi_lor_log1d
!!***

!----------------------------------------------------------------------

!!****f* ABINIT/xmpi_lor_log2d
!! NAME
!!  xmpi_lor_log2d
!!
!! FUNCTION
!!  Combines values from all processes and distribute
!!  the result back to all processes.
!!  Target: two-dimensional logical arrays.
!!
!! INPUTS
!!  comm= MPI communicator
!!
!! SIDE EFFECTS
!!  xval= buffer array
!!
!! SOURCE
subroutine xmpi_lor_log2d(xval,comm)



!This section has been created automatically by the script Abilint (TD).
!Do not modify the following lines by hand.
#undef ABI_FUNC
#define ABI_FUNC 'xmpi_lor_log2d'
!End of the abilint section

 implicit none


!Arguments ------------------------------------
 integer,intent(in) :: comm
 logical, DEV_CONTARRD intent(inout) :: xval(:,:)

!Local variables-------------------------------
#if defined HAVE_MPI
 integer :: n1,n2,ierr
 logical,allocatable :: xsum(:,:)
#endif

! *************************************************************************

#if defined HAVE_MPI
 if (comm /= MPI_COMM_SELF .and. comm /= MPI_COMM_NULL) then
!  Accumulate xval on all proc. in comm
   n1 = size(xval,1)
   n2 = size(xval,2)
   ABI_STAT_ALLOCATE(xsum,(n1,n2), ierr)
   if (ierr/= 0) call xmpi_abort(msg='error allocating xsum in xmpi_lor_log2d')
   call MPI_ALLREDUCE(xval,xsum,n1*n2,MPI_LOGICAL,MPI_LOR,comm,ierr)
   xval (:,:) = xsum(:,:)
   ABI_DEALLOCATE(xsum)
 end if
#endif

end subroutine xmpi_lor_log2d
!!***

!----------------------------------------------------------------------

!!****f* ABINIT/xmpi_lor_log3d
!! NAME
!!  xmpi_lor_log3d
!!
!! FUNCTION
!!  Combines values from all processes and distribute
!!  the result back to all processes.
!!  Target: three-dimensional logical arrays.
!!
!! INPUTS
!!  comm= MPI communicator
!!
!! SIDE EFFECTS
!!  xval= buffer array
!!
!! SOURCE
subroutine xmpi_lor_log3d(xval,comm)


!This section has been created automatically by the script Abilint (TD).
!Do not modify the following lines by hand.
#undef ABI_FUNC
#define ABI_FUNC 'xmpi_lor_log3d'
!End of the abilint section

 implicit none


!Arguments ------------------------------------
 integer,intent(in) :: comm
 logical, DEV_CONTARRD intent(inout) :: xval(:,:,:)

!Local variables-------------------------------
#if defined HAVE_MPI
 integer :: n1,n2,n3,ierr
 logical,allocatable :: xsum(:,:,:)
#endif

! *************************************************************************

#if defined HAVE_MPI
 if (comm /= MPI_COMM_SELF .and. comm /= MPI_COMM_NULL) then
!  Accumulate xval on all proc. in comm
   n1 = size(xval,1)
   n2 = size(xval,2)
   n3 = size(xval,3)

!  #if defined HAVE_MPI2 && defined HAVE_MPI2_INPLACE
!  call MPI_ALLREDUCE(MPI_IN_PLACE,xval,n1*n2*n3,MPI_LOGICAL,MPI_LOR,comm,ierr)
!  #else
   ABI_STAT_ALLOCATE(xsum,(n1,n2,n3), ierr)
   if (ierr/= 0) call xmpi_abort(msg='error allocating xsum in xmpi_lor_log3d')
   call MPI_ALLREDUCE(xval,xsum,n1*n2*n3,MPI_LOGICAL,MPI_LOR,comm,ierr)
   xval (:,:,:) = xsum(:,:,:)
   ABI_DEALLOCATE(xsum)
!  #endif
 end if
#endif

end subroutine xmpi_lor_log3d
!!***
