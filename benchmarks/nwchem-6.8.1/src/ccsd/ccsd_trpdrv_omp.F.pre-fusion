      subroutine ccsd_trpdrv_omp(t1,
     &     f1n,f1t,f2n,f2t,f3n,f3t,f4n,f4t,eorb,einv,
     &     eccsdt,g_objo,g_objv,g_coul,g_exch,
     &     ncor,nocc,nvir,emp4,emp5,
     &     oseg_lo,oseg_hi,
     &     kchunk, Tij, Tkj, Tia, Tka, Xia, Xka, Jia, Jka, Kia, Kka,
     &     Jij, Jkj, Kij, Kkj, Dja, Djka, Djia)
C     $Id: ccsd_trpdrv_omp.F 26593 2014-12-26 19:21:35Z jhammond $
      implicit none
c
#include "global.fh"
#include "ccsd_len.fh"
#include "ccsdps.fh"
c     
      integer ncor,nocc,nvir
      double precision t1(*)
      double precision f1n(nvir,nvir),f1t(nvir,nvir)
      double precision f2n(nvir,nvir),f2t(nvir,nvir)
      double precision f3n(nvir,nvir),f3t(nvir,nvir)
      double precision f4n(nvir,nvir),f4t(nvir,nvir)
      double precision eorb(*),einv(nvir,nvir)
      double precision Tij(*), Tkj(*), Tia(*), Tka(*)
      double precision Xia(*), Xka(*)
      double precision Jia(*), Jka(*), Jij(*), Jkj(*)
      double precision Kia(*), Kka(*), Kij(*), Kkj(*)
      double precision Dja(*), Djka(*), Djia(*)
! used to make inline threaded tengy correct - for now
      double precision dintc1(nvir),dintx1(nvir),t1v1(nvir)
      double precision dintc2(nvir),dintx2(nvir),t1v2(nvir)
c
      double precision emp4,emp5,denom
      double precision emp4i,emp5i,emp4k,emp5k
      double precision eaijk
      double precision eccsdt ! unused
      integer g_objo,g_objv,g_coul,g_exch
      integer inode,next,nodes,iam
      integer oseg_lo,oseg_hi
      integer a,b,c,i,j,k,akold,av
      integer klo, khi, kchunk
      integer nxtask
      external nxtask
#ifdef _OPENMP
      integer  omp_get_thread_num
      external omp_get_thread_num
      integer  omp_get_num_threads
      external omp_get_num_threads
      integer  omp_get_max_threads
      external omp_get_max_threads
      if (ga_nodeid().eq.0) write(6,99) omp_get_max_threads()
   99 format(2x,'Using ',i2,' OpenMP threads in CCSD(T)')
#endif
c
      nodes = ga_nnodes()
      iam = ga_nodeid()
c
c      call ga_sync() ! ga_sync called just before trpdrv in aoccsd2
c
      if (occsdps) then
         call pstat_on(ps_trpdrv)
      else
         call qenter('trpdrv',0)
      endif
      inode=-1
      next=nxtask(nodes, 1)
      do klo = 1, nocc, kchunk
         akold=0
         khi = min(nocc, klo+kchunk-1)
         do a=oseg_lo,oseg_hi
            av=a-ncor-nocc
            do j=1,nocc
               inode=inode+1
               if (inode.eq.next)then
                  call ga_get(g_objv,1+(j-1)*lnov,j*lnov,av,av,Dja,lnov)
                  call ga_get(g_objo,(klo-1)*lnvv+1,khi*lnvv,j,j,Tkj,
     &                 (khi-klo+1)*lnvv)
                  call ga_get(g_objo,lnovv+(klo-1)*lnov+1,
     &                 lnovv+khi*lnov,j,j,Jkj,(khi-klo+1)*lnov)
                  call ga_get(g_objo,lnovv+lnoov+(klo-1)*lnov+1,
     &                 lnovv+lnoov+khi*lnov,j,j,Kkj,(khi-klo+1)*lnov)
                  if (akold .ne. a) then
                     akold = a
                     call ga_get(g_coul,1,lnvv,(a-oseg_lo)*nocc+klo,
     &                    (a-oseg_lo)*nocc+khi,Jka,lnvv)
                     call ga_get(g_exch,1,lnvv,(a-oseg_lo)*nocc+klo,
     &                    (a-oseg_lo)*nocc+khi,Kka,lnvv)
                     call ga_get(g_objv,1+lnoov+(klo-1)*lnov,
     &                    lnoov+khi*lnov,av,av,Tka,(khi-klo+1)*lnov)
                     call ga_get(g_objv,1+2*lnoov+(klo-1)*lnov,
     &                    2*lnoov+khi*lnov,av,av,Xka,(khi-klo+1)*lnov)
                  endif
                  do k = klo, khi
                     call ga_get(g_objv,1+(j-1)*nvir+(k-1)*lnov,
     &                    j*nvir+(k-1)*lnov,av,av,
     &                    Djka(1+(k-klo)*nvir),nvir)
                  enddo

                  do i=1,nocc

                     call ga_get(g_objo,(i-1)*lnvv+1,i*lnvv,j,j,Tij,
     &                    lnvv)
                     call ga_get(g_objo,lnovv+(i-1)*lnov+1,
     &                    lnovv+i*lnov,j,j,Jij,lnov)
                     call ga_get(g_objo,lnovv+lnoov+(i-1)*lnov+1,
     &                    lnovv+lnoov+i*lnov,j,j,Kij,lnov)
                     call ga_get(g_coul,1,lnvv,(a-oseg_lo)*nocc+i,
     &                    (a-oseg_lo)*nocc+i,Jia,lnvv)
                     call ga_get(g_exch,1,lnvv,(a-oseg_lo)*nocc+i,
     &                    (a-oseg_lo)*nocc+i,Kia,lnvv)
                     call ga_get(g_objv,1+(j-1)*nvir+(i-1)*lnov,
     &                    j*nvir+(i-1)*lnov,av,av,Djia,nvir)
                     call ga_get(g_objv,1+lnoov+(i-1)*lnov,
     &                    lnoov+i*lnov,av,av,Tia,lnov)
                     call ga_get(g_objv,1+2*lnoov+(i-1)*lnov,
     &                    2*lnoov+i*lnov,av,av,Xia,lnov)

                     do k=klo,min(khi,i)

!$omp parallel
!$omp& shared(einv,eorb)
!$omp& shared(f1n,f2n,f3n,f4n,f1t,f2t,f3t,f4t)
!$omp& shared(t1v1,dintc1,dintx1)
!$omp& shared(t1v2,dintc2,dintx2)
!$omp& private(b,c,eaijk,denom)
!$omp& firstprivate(ncor,nocc,nvir,lnov,lnvv,i,j,k,klo)

!$omp single
                        if (occsdps) then
                           call pstat_on(ps_doxxx)
                        else
                           call qenter('doxxx',0)
                        endif
!$omp end single 

!$omp sections
!$omp section
                        call dgemm('n','t',nvir,nvir,nvir,1.0d0,
     1                       Jia,nvir,Tkj(1+(k-klo)*lnvv),nvir,0.0d0,
     2                       f1n,nvir)
                        call dgemm('n','n',nvir,nvir,nocc,-1.0d0,
     1                       Tia,nvir,Kkj(1+(k-klo)*lnov),nocc,1.0d0,
     2                       f1n,nvir)
!$omp section
                        call dgemm('n','t',nvir,nvir,nvir,1.0d0,
     1                       Kia,nvir,Tkj(1+(k-klo)*lnvv),nvir,0.0d0,
     2                       f2n,nvir)
                        call dgemm('n','n',nvir,nvir,nocc,-1.0d0,
     1                       Xia,nvir,Kkj(1+(k-klo)*lnov),nocc,1.0d0,
     2                       f2n,nvir)
!$omp section
                        call dgemm('n','n',nvir,nvir,nvir,1.0d0,
     1                       Jia,nvir,Tkj(1+(k-klo)*lnvv),nvir,0.0d0,
     2                       f3n,nvir)
                        call dgemm('n','n',nvir,nvir,nocc,-1.0d0,
     1                       Tia,nvir,Jkj(1+(k-klo)*lnov),nocc,1.0d0,
     2                       f3n,nvir)
!$omp section
                        call dgemm('n','n',nvir,nvir,nvir,1.0d0,
     1                       Kia,nvir,Tkj(1+(k-klo)*lnvv),nvir,0.0d0,
     2                       f4n,nvir)
                        call dgemm('n','n',nvir,nvir,nocc,-1.0d0,
     1                       Xia,nvir,Jkj(1+(k-klo)*lnov),nocc,1.0d0,
     2                       f4n,nvir)
!$omp section
                        call dgemm('n','t',nvir,nvir,nvir,1.0d0,
     1                       Jka(1+(k-klo)*lnvv),nvir,Tij,nvir,0.0d0,
     2                       f1t,nvir)
                        call dgemm('n','n',nvir,nvir,nocc,-1.0d0,
     1                       Tka(1+(k-klo)*lnov),nvir,Kij,nocc,1.0d0,
     2                       f1t,nvir)
!$omp section
                        call dgemm('n','t',nvir,nvir,nvir,1.0d0,
     1                       Kka(1+(k-klo)*lnvv),nvir,Tij,nvir,0.0d0,
     2                       f2t,nvir)
                        call dgemm('n','n',nvir,nvir,nocc,-1.0d0,
     1                       Xka(1+(k-klo)*lnov),nvir,Kij,nocc,1.0d0,
     2                       f2t,nvir)
!$omp section
                        call dgemm('n','n',nvir,nvir,nvir,1.0d0,
     1                       Jka(1+(k-klo)*lnvv),nvir,Tij,nvir,0.0d0,
     2                       f3t,nvir)
                        call dgemm('n','n',nvir,nvir,nocc,-1.0d0,
     1                       Tka(1+(k-klo)*lnov),nvir,Jij,nocc,1.0d0,
     2                       f3t,nvir)
!$omp section
                        call dgemm('n','n',nvir,nvir,nvir,1.0d0,
     1                       Kka(1+(k-klo)*lnvv),nvir,Tij,nvir,0.0d0,
     2                       f4t,nvir)
                        call dgemm('n','n',nvir,nvir,nocc,-1.0d0,
     1                       Xka(1+(k-klo)*lnov),nvir,Jij,nocc,1.0d0,
     2                       f4t,nvir)
!$omp end sections

!$omp single 
                        if (occsdps) then
                           call pstat_off(ps_doxxx)
                        else
                           call qexit('doxxx',0)
                        endif
!$omp end single 

                        eaijk=eorb(a) - (  eorb(ncor+i)
     &                                    +eorb(ncor+j)
     &                                    +eorb(ncor+k) )
!$omp do collapse(2)
!$omp& schedule(static)
                        do b=1,nvir
                          do c=1,nvir
                            einv(c,b)=-1.0d0/( eorb(ncor+nocc+b)
     &                                        +eorb(ncor+nocc+c)+eaijk )
                          enddo
                        enddo
!$omp end do
!!!
!!! tengy is inlined to enable more extensive threading...
!!!
!!!                        call ccsd_tengy_omp(f1n,f1t,f2n,f2t,
!!!     1                                      f3n,f3t,f4n,f4t,
!!!     2                                      Dja(1+(i-1)*nvir),
!!!     3                                      Djia,
!!!     4                                      t1((k-1)*nvir+1),
!!!     5                                      einv,emp4,emp5,
!!!     6                                      nvir)

!$omp single 
      if (occsdps) then
         call pstat_on(ps_tengy)
      else
         call qenter('tengy',0)
      endif
      call dcopy(nvir,Dja(1+(i-1)*nvir),1,dintc1,1)
      call dcopy(nvir,Dja(1+(k-1)*nvir),1,dintc2,1)
      call dcopy(nvir,Djia,1,dintx1,1)
      call dcopy(nvir,Djka(1+(k-klo)*nvir),1,dintx2,1)
      call dcopy(nvir,t1((k-1)*nvir+1),1,t1v1,1)
      call dcopy(nvir,t1((i-1)*nvir+1),1,t1v2,1)
      emp4i = 0.0d0
      emp5i = 0.0d0
      emp4k = 0.0d0
      emp5k = 0.0d0
!$omp end single 

! to ensure emp[45][ik] are visible
!$omp barrier

!      subroutine ccsd_tengy_omp(f1n,f1t,f2n,f2t,f3n,f3t,f4n,f4t,
!     1                          dintc,dintx,t1v,einv,
!     2                          emp4,emp5,nvir)
!
! dintc -> Dja(1+(i-1)*nvir)
! dintx -> Djia
! t1v   -> t1((k-1)*nvir+1)
!
!      double precision dintc(nvir),dintx(nvir),t1v(nvir)
!
!$omp do collapse(2)
!$omp& schedule(static)
!$omp& reduction(+:emp5i,emp4i)
      do b=1,nvir
        do c=1,nvir
          denom=einv(c,b)
          emp4i=emp4i+denom*
     &         (f1t(b,c)+f1n(c,b)+f2t(c,b)+f3n(b,c)+f4n(c,b))*
     &         (f1t(b,c)-2*f2t(b,c)-2*f3t(b,c)+f4t(b,c))
          emp4i=emp4i-denom*
     &         (f1n(b,c)+f1t(c,b)+f2n(c,b)+f3n(c,b))*
     &         (2*f1t(b,c)-f2t(b,c)-f3t(b,c)+2*f4t(b,c))
          emp4i=emp4i+3*denom*(
     &         f1n(b,c)*(f1n(b,c)+f3n(c,b)+2*f4t(c,b))+
     &         f2n(b,c)*f2t(c,b)+f3n(b,c)*f4t(b,c))
          emp5i=emp5i+denom*t1v1(b)*dintx1(c)*
     &        (    f1t(b,c)+f2n(b,c)+f4n(c,b)
     &         -2*(f3t(b,c)+f4n(b,c)+f2n(c,b)+
     &             f1n(b,c)+f2t(b,c)+f3n(c,b))
     &         +4*(f3n(b,c)+f4t(b,c)+f1n(c,b)))
          emp5i=emp5i+denom*t1v1(b)*dintc1(c)*
     &        (     f1n(b,c)+f4n(b,c)+f1t(c,b)
     &          -2*(f2n(b,c)+f3n(b,c)+f2t(c,b)))
        enddo
      enddo
!$omp end do
!!!                           call ccsd_tengy_omp(f1t,f1n,f2t,f2n,
!!!     1                                         f3t,f3n,f4t,f4n,
!!!     2                                         Dja(1+(k-1)*nvir),
!!!     3                                         Djka(1+(k-klo)*nvir),
!!!     4                                         t1((i-1)*nvir+1),
!!!     5                                         einv,emp4,emp5,
!!!     6                                         nvir)

!      subroutine ccsd_tengy_omp(f1n,f1t,f2n,f2t,f3n,f3t,f4n,f4t,
!     1                          dintc,dintx,t1v,einv,
!     2                          emp4,emp5,nvir)
!
! dintc -> Dja(1+(k-1)*nvir)
! dintx -> Djka(1+(k-klo)*nvir)
! t1v   -> t1((i-1)*nvir+1)
!
!      double precision dintc(nvir),dintx(nvir),t1v(nvir)
!
!$omp do collapse(2)
!$omp& schedule(static)
!$omp& reduction(+:emp5k,emp4k)
      do b=1,nvir
        do c=1,nvir
          denom=einv(c,b)
          emp4k=emp4k+denom*
     &         (f1n(b,c)+f1t(c,b)+f2n(c,b)+f3t(b,c)+f4t(c,b))*
     &         (f1n(b,c)-2*f2n(b,c)-2*f3n(b,c)+f4n(b,c))
          emp4k=emp4k-denom*
     &         (f1t(b,c)+f1n(c,b)+f2t(c,b)+f3t(c,b))*
     &         (2*f1n(b,c)-f2n(b,c)-f3n(b,c)+2*f4n(b,c))
          emp4k=emp4k+3*denom*(
     &         f1t(b,c)*(f1t(b,c)+f3t(c,b)+2*f4n(c,b))+
     &         f2t(b,c)*f2n(c,b)+f3t(b,c)*f4n(b,c))
          emp5k=emp5k+denom*t1v2(b)*dintx2(c)*
     &        (    f1n(b,c)+f2t(b,c)+f4t(c,b)
     &         -2*(f3n(b,c)+f4t(b,c)+f2t(c,b)+
     &             f1t(b,c)+f2n(b,c)+f3t(c,b))
     &         +4*(f3t(b,c)+f4n(b,c)+f1t(c,b)))
          emp5k=emp5k+denom*t1v2(b)*dintc2(c)*
     &        (     f1t(b,c)+f4t(b,c)+f1n(c,b)
     &          -2*(f2t(b,c)+f3t(b,c)+f2n(c,b)))
        enddo
      enddo
!$omp end do

!$omp single 
      emp4 = emp4 + emp4i
      emp5 = emp5 + emp5i
      if (i.ne.k) then
          emp4 = emp4 + emp4k
          emp5 = emp5 + emp5k
      end if ! (i.ne.k)

      if (occsdps) then
         call pstat_off(ps_tengy)
      else
         call qexit('tengy',0)
      endif
!$omp end single 

!$omp end parallel
                     end do    ! k

                  end do       ! i
c                  if (iprt.gt.50)then
c                     write(6,1234)iam,a,j,emp4,emp5
c 1234                format(' iam aijk',3i5,2e15.5)
c                  end if
                  next=nxtask(nodes, 1)
               end if
            end do
            if(ga_nodeid().eq.0) then
               write(6,4321) ' ccsd(t): done ',
     A              a-(ncor+nocc)+((klo-1)/kchunk)*nvir,
     O              ' out of ',(nocc/kchunk)*nvir,
     O              ' progress: ',
     O              ((a-(ncor+nocc)+((klo-1)/kchunk)*nvir)*100d0)/
     D              ((nocc/kchunk)*nvir),
     P              '%'
 4321          format(a,i8,a,i8,a,f6.1,a1)
            endif
         end do
      end do
      call ga_sync()
      next=nxtask(-nodes, 1)
      call ga_sync()
      if (occsdps) then
         call pstat_off(ps_trpdrv)
      else
         call qexit('trpdrv',0)
      endif
c
      end

      subroutine ccsd_tengy_omp(f1n,f1t,f2n,f2t,f3n,f3t,f4n,f4t,
     1                          dintc,dintx,t1v,einv,
     2                          emp4,emp5,nvir)
      implicit none
#include "ccsdps.fh"
      integer nvir
      integer b,c
      double precision emp4,emp5,denom
      double precision f1n(nvir,nvir),f1t(nvir,nvir)
      double precision f2n(nvir,nvir),f2t(nvir,nvir)
      double precision f3n(nvir,nvir),f3t(nvir,nvir)
      double precision f4n(nvir,nvir),f4t(nvir,nvir)
      double precision dintc(nvir),dintx(nvir),t1v(nvir)
      double precision einv(nvir,nvir)
      if (occsdps) then
         call pstat_on(ps_tengy)
      else
         call qenter('tengy',0)
      endif
!$omp parallel
!$omp& shared(f1n,f2n,f3n,f4n,f1t,f2t,f3t,f4t,dintx,dintc,t1v,einv)
!$omp& private(denom)
!$omp do collapse(2)
!$omp& reduction(+:emp5,emp4) schedule(static)
      do b=1,nvir
        do c=1,nvir
          denom=einv(c,b)
          emp4=emp4+denom*
     &         (f1t(b,c)+f1n(c,b)+f2t(c,b)+f3n(b,c)+f4n(c,b))*
     &         (f1t(b,c)-2*f2t(b,c)-2*f3t(b,c)+f4t(b,c))
          emp4=emp4-denom*
     &         (f1n(b,c)+f1t(c,b)+f2n(c,b)+f3n(c,b))*
     &         (2*f1t(b,c)-f2t(b,c)-f3t(b,c)+2*f4t(b,c))
          emp4=emp4+3*denom*(
     &         f1n(b,c)*(f1n(b,c)+f3n(c,b)+2*f4t(c,b))+
     &         f2n(b,c)*f2t(c,b)+f3n(b,c)*f4t(b,c))
          emp5=emp5+denom*t1v(b)*dintx(c)*
     &        (     f1t(b,c)+f2n(b,c)+f4n(c,b)
     &         -2*(f3t(b,c)+f4n(b,c)+f2n(c,b)+
     &              f1n(b,c)+f2t(b,c)+f3n(c,b))
     &         +4*(f3n(b,c)+f4t(b,c)+f1n(c,b)))
          emp5=emp5+denom*t1v(b)*dintc(c)*
     &        (     f1n(b,c)+f4n(b,c)+f1t(c,b)
     &          -2*(f2n(b,c)+f3n(b,c)+f2t(c,b)))
        enddo
      enddo
!$omp end do
!$omp end parallel
      if (occsdps) then
         call pstat_off(ps_tengy)
      else
         call qexit('tengy',0)
      endif
      return
      end







