      SUBROUTINE new_ga4ind_N5uhf_mrcc_lm2(rtdb,d_v2,
     1                                k_v2_offset,
     1                                size_2e,iref)
C     $Id: tce_mo2e_zones_4a_disk_ga_N5.F 19706 2010-10-29 17:52:31Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     t ( p1 p2 h3 h4 )_t
      IMPLICIT NONE
#include "rtdb.fh"
#include "global.fh"
#include "mafdecls.fh"
#include "stdio.fh"
#include "util.fh"
#include "bas.fh"
#include "schwarz.fh"
#include "sym.fh"
#include "sf.fh"
#include "errquit.fh"
#include "tce.fh"
#include "tce_main.fh"
#include "tce_mrcc.fh"
c
c KK
c
c
c     max. number of p2 groups =200
c
c
      integer rtdb                 ! Run-time database
      integer d_v2                 ! MO integrals
      integer k_v2_offset  ! MO integrals offset
      integer size_2e              ! 2e file size
CCC DEBUG LM2
      integer iii,im1shift,im2,im3,im4
c
      INTEGER azone1,azone2,azone3,azone4
      INTEGER g1b,g2b,g3b,g4b
      INTEGER igi1,igi2,igi3,igi4
      INTEGER ii,i,j,k,l,N,ipos1,ipos2,ipos3,ipos4
      INTEGER size_4a,l_4a,k_4a
      INTEGER size_aaaa
      INTEGER d_agaa,size_agaa,l_offset_agaa,k_offset_agaa
      INTEGER d_ggaa,size_ggaa,l_offset_ggaa,k_offset_ggaa
      INTEGER d_ggga,size_ggga,l_offset_ggga,k_offset_ggga
      INTEGER l_loc_aaaa,k_loc_aaaa,size_loc_aaaa
      INTEGER l_loc_agaa,k_loc_agaa,size_loc_agaa
      INTEGER l_loc_ggaa,k_loc_ggaa,size_loc_ggaa
      INTEGER l_loc_ggga,k_loc_ggga,size_loc_ggga
      INTEGER l_loc_gggg,k_loc_gggg,size_loc_gggg
c new ggga partitioning 
      integer size_loc_ggga1,size_loc_ggga2
      integer l_loc_ggga1,k_loc_ggga1
      integer l_loc_ggga2,k_loc_ggga2
c
      integer key_aaaa,key_agaa,key_ggaa,key_ggga
      integer offset_aaaa,offset_agaa,offset_ggaa,offset_ggga
      integer key_gggg,offset_gggg
      integer l_4g_s1,k_4g_s1,size_4g_s1
c
      integer max_size_temp,sumx
c
      integer tot_azone1_sh,tot_azone2_sh
      integer tot_azone3_sh,tot_azone4_sh
      integer tot_zone(1000)  !it was d.prec.
c
      integer iha,ihb !number of corr. alpha, beta holes
      integer ipa,ipb !number of corr. alpha, beta particles
c
      integer mu,nu,rho,sigma
      integer mu_lo,mu_hi
      integer nu_lo,nu_hi
      integer rho_lo,rho_hi
      integer sigma_lo,sigma_hi
      integer mu_range
      integer nu_range
      integer rho_range
      integer sigma_range
      integer mu1,nu1,rho1,sigma1
      integer shift_mu,shift_nu
      integer shift_rho,shift_sigma
      integer work1,work2          ! Work array sizes
      integer l_work1,k_work1      ! Work array 1
      integer l_work2,k_work2      ! Work array 2
      integer imu1,inu1,irho1,isigma1
c
c      integer l_movecs_orb,k_movecs_orb
c
      integer l_integral,l_coeff
      integer k_integral,k_coeff
      integer l_aux,k_aux,size_aux,offset_aux
      integer l_aux2,k_aux2,size_aux2
      integer size_ic,size_integral,size_coeff,max_na
c      auxiliary objects
      integer k_step1,l_step1,size_step1
      integer k_step2,l_step2,size_step2
      integer istart,jstart
      integer size_movecs
      integer k_movecs_sorted_t,l_movecs_sorted_t
      integer n_spinorb
c
      integer index_pair,icol,irow,size_icc,ipass
c
c 
      integer l_4af_offset,k_4af_offset,d_4af
      integer sf_chunk,request
      integer key_4af,offset_4af,size_4af
      character*255 filename
c 
      logical parallel
c
      INTEGER length
      INTEGER next
      INTEGER nprocs
      INTEGER count
      integer nxtask
      external nxtask
c
      INTEGER NXTASKsub
      EXTERNAL NXTASKsub
      integer iref,pgd
c
      logical nodezero
c
c
      nodezero=(ga_nodeid().eq.0)
c
      if(lusesub)pgd = int_mb(k_innodes+ga_nnodes()+ga_nodeid())
c
ccccx      if((fast2e.eq.20).and.(.not.lusesub)) 
ccccx     &  call errquit('fast2e 20 only with lusesub',1,MA_ERR)
c
c
      max_size_temp=imaxsize**4
c
      do ii=1,1000
       tot_zone(ii)=0.0d0
      enddo
      if(atpart.gt.1000)
     &  call errquit('tce_zones: atpart too big',1,MA_ERR)
      sumx=0
      do ii=1,atpart
       tot_zone(ii)=sumx
       sumx=sumx+nalength(ii)
      enddo
c
c
c *** debug ***
c      if(nodezero) then
c       write(6,*)'I am in LM2 '
c       call util_flush(6)
c      end if
c *************
c
c
c this module is called only if intorb = .true.
c N is the number of correlated orbitals
        N = nmo(1) - nfc(1) - nfv(1)
        iha = nocc(1)-nfc(1)
        ihb = nocc(ipol)-nfc(ipol)
        ipa = nmo(1)-nocc(1)-nfv(1)
        ipb = nmo(ipol)-nocc(ipol)-nfv(ipol)
c
c     Offset for 4a file
c
      sf_chunk=(imaxsize)**4
      call tce_4a_offset(l_4af_offset,k_4af_offset,size_4af)
      call createfile(filename,d_4af,size_4af)
      call reconcilefile(d_4af,size_4af)
c
c
      call int_mem_2e4c(work1,work2)
      if (.not.ma_push_get(mt_dbl,work1,'work1',l_work1,k_work1))
     1  call errquit('tce_ao2e: MA problem work1',0,MA_ERR)
      if (.not.ma_push_get(mt_dbl,work2,'work2',l_work2,k_work2))
     1  call errquit('tce_ao2e: MA problem work2',1,MA_ERR)
c
c
c 
c 4af file formed here
c
c
c
      if(lusesub) then
      nprocs = ga_pgroup_nnodes(pgd)
      count = 0
      next = NXTASKsub(nprocs,1,pgd)
      else
      nprocs = ga_nnodes()
      count = 0
      next = NXTASK(nprocs, 1)
      endif
c
c
      DO azone1 = 1,atpart      !nu
      DO azone2 = azone1,atpart !mu
      DO azone3 = 1,atpart      !sigma
      DO azone4 = azone3,atpart !rho
      IF (next.eq.count) THEN
c ---------------------------
        size_4a = nalength(azone1)*nalength(azone2)*
     1            nalength(azone3)*nalength(azone4)
        if(.not.ma_push_get(mt_dbl,size_4a,'4a',l_4a,k_4a))
     1     call errquit('tce_4af_zones1: MA problem',0,MA_ERR)
        call dfill(size_4a, 0.0d0, dbl_mb(k_4a), 1)
         shift_mu = 0
         do mu    = a2length(azone2)+1,a2length(azone2+1)
            if (.not.bas_cn2bfr(ao_bas_han,mu,mu_lo,mu_hi))
     1      call errquit('tce_ao2e: basis fn range problem 1',0,
     2      BASIS_ERR)
            mu_range = mu_hi - mu_lo + 1
         shift_nu = 0
         do nu    = a2length(azone1)+1,a2length(azone1+1)
            if (.not.bas_cn2bfr(ao_bas_han,nu,nu_lo,nu_hi))
     1      call errquit('tce_ao2e: basis fn range problem 1',0,
     2      BASIS_ERR)
            nu_range = nu_hi - nu_lo + 1
         shift_rho = 0
         do rho   = a2length(azone4)+1,a2length(azone4+1)
            if (.not.bas_cn2bfr(ao_bas_han,rho,rho_lo,rho_hi))
     1      call errquit('tce_ao2e: basis fn range problem 1',0,
     2      BASIS_ERR)
            rho_range = rho_hi - rho_lo + 1
         shift_sigma = 0
         do sigma = a2length(azone3)+1,a2length(azone3+1)
            if (.not.bas_cn2bfr(ao_bas_han,sigma,sigma_lo,sigma_hi))
     1      call errquit('tce_ao2e: basis fn range problem 1',0,
     2      BASIS_ERR)
            sigma_range = sigma_hi - sigma_lo + 1
            if (schwarz_shell(rho,sigma)*schwarz_shell(mu,nu)
     1          .ge. tol2e) then
            call int_2e4c(ao_bas_han,mu,nu,ao_bas_han,rho,sigma,
     1           work2,dbl_mb(k_work2),work1,dbl_mb(k_work1))
c
            i=0
             do mu1     = 1,mu_range
             do nu1     = 1,nu_range
             do rho1    = 1,rho_range
             do sigma1  = 1,sigma_range
            i=i+1
            inu1=nu1+shift_nu
            isigma1=sigma1+shift_sigma
            imu1=mu1+shift_mu
            irho1=rho1+shift_rho
c (isigma1,irho1|inu1, imu1)
            ipos1=(((imu1-1)*nalength(azone1)+inu1-1)*
     1            nalength(azone4)+irho1-1)*nalength(azone3)
     2            +isigma1
            dbl_mb(k_4a+ipos1-1)=dbl_mb(k_work1+i-1)
            enddo
            enddo
            enddo
            enddo
            end if !schwarz  screening
         shift_sigma = shift_sigma + sigma_range
         enddo !sigma
         shift_rho   = shift_rho + rho_range
         enddo !rho
         shift_nu    = shift_nu + nu_range
         enddo !nu
         shift_mu    = shift_mu + mu_range
         enddo !mu
c
c fixing offsets and sf_writing
         key_4af=azone4 - 1 + atpart * (azone3 - 1 +
     &          atpart * (azone2 - 1 + atpart * (azone1 - 1)))
        call tce_hash(int_mb(k_4af_offset),key_4af,offset_4af)
        call ga_put(d_4af,offset_4af+1,offset_4af+size_4a,1,1,
     1    dbl_mb(k_4a),1)
c closing l_4a file
        if (.not.ma_pop_stack(l_4a))
     1   call errquit('tcc_mo2e_4af2: l_4a',15,MA_ERR)
c ---------------------------
c
      if(lusesub) then
        next = NXTASKsub(nprocs,1,pgd)
      else
        next = NXTASK(nprocs, 1)
      endif
      ENDIF 
      count = count + 1
c
      ENDDO !azone4
      ENDDO !azone3
      ENDDO !azone2
      ENDDO !azone1
c
c
      if(lusesub) then
        next = NXTASKsub(-nprocs,1,pgd)
        call ga_pgroup_sync(pgd)
      else
        next = NXTASK(-nprocs,1)
        call ga_sync()
      endif
c
c
c
      max_na=0
      do i=1,atpart
       if(nalength(i).gt.max_na) max_na=nalength(i)
      enddo
      size_icc=tile_dim*max_na
c
       if (.not.ma_push_get(mt_dbl,size_icc,'l_coeff',
     1  l_coeff,k_coeff))
     1  call errquit('tce_4s: MA problem l_coeff',0,MA_ERR)
c
c
       n_spinorb=nmo(1)-nfv(1)-nfc(1)+nmo(ipol)-nfv(ipol)-nfc(ipol)
       size_movecs=nbf*n_spinorb
       if (.not.ma_push_get(mt_dbl,size_movecs,'l_movecs_t',
     1  l_movecs_sorted_t,k_movecs_sorted_t))
     1  call errquit('tce_4s: MA problem l_movecs_t',0,MA_ERR)
       call dfill(size_movecs,0.0d0, dbl_mb(k_movecs_sorted_t),1)
c transposition of k_movecs_sorted
ccx      CALL TCE_SORT_2(dbl_mb(k_movecs_sorted),dbl_mb(k_movecs_sorted_t),
ccx     & n_spinorb,nbf,2,1,1.0d0)
ccx DEBUG LM2
       i=1
       do imu1=1,nbf
       do igi1=1,n_spinorb
        ipos1=(igi1-1)*nbf+imu1
        dbl_mb(k_movecs_sorted_t+i-1)=dbl_mb(k_movecs_sorted+ipos1-1)
        i=i+1
       enddo
       enddo
ccx       if(nodezero) then
ccx        write(6,*)'ipol = ',ipol
ccx         imu1=0
ccx         do i=1,noab+nvab
ccx          imu1=imu1+int_mb(k_range+i-1)
ccx         enddo
ccx        write(6,*)'sum k_ranges ',imu1
ccx        write(6,*)'n_spinorb    ',n_spinorb
ccx        write(6,*)'atpart       ',atpart
ccx       end if
c
c k_movecs_sorted      ( mu , a )
c k_movecs_sorted_t    ( a  , mu) 
c
      if(lusesub) then
      nprocs = ga_pgroup_nnodes(pgd)
      count = 0
      next = NXTASKsub(nprocs,1,pgd)
      else
      nprocs = ga_nnodes()
      count = 0
      next = NXTASK(nprocs, 1)
      endif
c do parallel
      DO azone2 = 1,atpart
      DO azone1 = 1,azone2
      DO g3b = 1,noab+nvab
      DO g1b = 1,noab+nvab
      IF(int_mb(k_spin+g1b-1).eq.int_mb(k_spin+g3b-1)) THEN
      IF (next.eq.count) THEN
       size_loc_ggaa= nalength(azone1)*nalength(azone2)*
     1 int_mb(k_range+g3b-1)*int_mb(k_range+g1b-1)
       if (.not.ma_push_get(mt_dbl,size_loc_ggaa,'loc_ggaa',
     1 l_loc_ggaa,k_loc_ggaa))
     1 call errquit('step2:1',0,MA_ERR)
      call dfill(size_loc_ggaa,0.0d0, dbl_mb(k_loc_ggaa), 1)
c declare k_step2: [az2][g3][az1][nbf_all_az3]
       size_step2=nalength(azone2)*int_mb(k_range+g3b-1)*
     &            nalength(azone1)*nbf
       if (.not.ma_push_get(mt_dbl,size_step2,'step2',
     1 l_step2,k_step2))
     1 call errquit('step2:1a',0,MA_ERR)
       call dfill(size_step2,0.0d0, dbl_mb(k_step2), 1)
       jstart=0
      DO azone3 = 1,atpart !======== azone3
c step1
c declare k_step1: [az2]*[az3]*[az1][all_az4]
       size_step1=nbf*nalength(azone3)*nalength(azone1)*nalength(azone2)
       if (.not.ma_push_get(mt_dbl,size_step1,'step1',
     1 l_step1,k_step1))
     1 call errquit('step2:1b',0,MA_ERR)
c zero k_step1
       call dfill(size_step1,0.0d0, dbl_mb(k_step1), 1) 
       istart=0
c === DONE ===
       do azone4=1,atpart   !========= azone4
        tot_azone4_sh=tot_zone(azone4)
        size_loc_aaaa=nalength(azone1)*nalength(azone2)*
     1  nalength(azone3)*nalength(azone4)
c
        if(azone4.le.azone3) then ! azone4 <= azone3
         key_aaaa=azone3-1+atpart*(azone4-1+
     &          atpart*(azone2-1+atpart*(azone1-1)))
         call tce_hash(int_mb(k_4af_offset),key_aaaa,offset_aaaa)
c open k_aux (az4 az3 | az1 az2)
         if (.not.ma_push_get(mt_dbl,size_loc_aaaa,'auxaaaa',
     1   l_aux,k_aux))
     1   call errquit('g4ind:MA2d',0,MA_ERR)
         call ga_get(d_4af,offset_aaaa+1,offset_aaaa+size_loc_aaaa,1,1,
     1    dbl_mb(k_aux),1)
         CALL TCE_SORT_4KG_(dbl_mb(k_aux),dbl_mb(k_step1+istart),
     &   nalength(azone4),nalength(azone3),
     &   nalength(azone1),nalength(azone2),
     &   4,2,3,1,1.0d0)
         if (.not.ma_pop_stack(l_aux))
     1   call errquit('g4ind:MA1x1',15,MA_ERR)
c DONE ----
         istart=istart+size_loc_aaaa
        else    ! azone4 > azone3
         key_aaaa=azone4-1+atpart*(azone3-1+
     &          atpart*(azone2-1+atpart*(azone1-1)))
         call tce_hash(int_mb(k_4af_offset),key_aaaa,offset_aaaa)
c open k_aux (az3 az4 | az1 az2)
         if (.not.ma_push_get(mt_dbl,size_loc_aaaa,'auxaaaa',
     1   l_aux,k_aux))
     1   call errquit('g4ind:MA1b',15,MA_ERR)
         call ga_get(d_4af,offset_aaaa+1,offset_aaaa+size_loc_aaaa,1,1,
     1    dbl_mb(k_aux),1)
         CALL TCE_SORT_4KG_(dbl_mb(k_aux),dbl_mb(k_step1+istart),
     &   nalength(azone3),nalength(azone4),
     &   nalength(azone1),nalength(azone2),
     &   4,1,3,2,1.0d0)
         if (.not.ma_pop_stack(l_aux))
     1   call errquit('g4ind:MA1x1',15,MA_ERR)
         istart=istart+size_loc_aaaa
        end if  ! azone4 <= azone3
       enddo  !azone4
c DONE ----
c dgemm ([az2][az3]|[az1][nbf_all_az4])C[nbf,g3] ==>
c       ([az2][az3]|[az1][g3])
c DONE ----
       if (.not.ma_push_get(mt_dbl,int_mb(k_range+g3b-1)*
     1 nalength(azone3)*nalength(azone1)*nalength(azone2),
     1 'auxa1b',l_aux,k_aux))
     1 call errquit('g4ind:MA1b1',15,MA_ERR)
c OFFLOAD TARGET 1
       call dgemm('N','N',
     1    nalength(azone3)*nalength(azone1)*nalength(azone2),
     2    int_mb(k_range+g3b-1),
     3    nbf,
     4    1.0d0,dbl_mb(k_step1),
     5    nalength(azone3)*nalength(azone1)*nalength(azone2),
     6    dbl_mb(k_movecs_sorted+
     5                 int_mb(k_offset+g3b-1)*nbf),nbf,0.0d0,
     6    dbl_mb(k_aux),
     7    nalength(azone3)*nalength(azone1)*nalength(azone2))
c
c DONE ----
c
c transpose  ([az2][az3]|[az1][g3]) --> ([az2][g3][az1][az3])
         CALL TCE_SORT_4KG_(dbl_mb(k_aux),dbl_mb(k_step2+jstart),
     &   nalength(azone2),nalength(azone3),
     &   nalength(azone1),int_mb(k_range+g3b-1),
     &   1,4,3,2,1.0d0)
         if (.not.ma_pop_stack(l_aux))
     1   call errquit('g4ind:MA1yy7',15,MA_ERR)
        jstart=jstart+int_mb(k_range+g3b-1)*
     1  nalength(azone3)*nalength(azone1)*nalength(azone2)
c delete l_step1 
       if (.not.ma_pop_stack(l_step1))
     1   call errquit('g4ind:MA1q72',15,MA_ERR)
c
      ENDDO ! azone3
C DONE ----
c k_step2 formed: ([az2][g3][az1][all-az3])
c now: ([az2][g3][az1][all-az3]) C([all-az3][g1]) -->
c      ([az2][g3][az1][g1])
       if (.not.ma_push_get(mt_dbl,size_loc_ggaa,'auxbbb',
     1     l_aux,k_aux))
     1     call errquit('g4ind:MAR2q',15,MA_ERR)
c OFFLOAD TARGET 2
       call dgemm('N','N',
     1  nalength(azone2)*int_mb(k_range+g3b-1)*nalength(azone1),
     2  int_mb(k_range+g1b-1), 
     3  nbf,
     4  1.0d0,dbl_mb(k_step2),
     5  nalength(azone2)*int_mb(k_range+g3b-1)*nalength(azone1),
     6  dbl_mb(k_movecs_sorted+int_mb(k_offset+g1b-1)*nbf),nbf,0.0d0,
     7  dbl_mb(k_aux),
     8  nalength(azone2)*int_mb(k_range+g3b-1)*nalength(azone1))
c last transposition (([az2][g3][az1][g1])-->([g1][g3]|[az1][az2])
c
         CALL TCE_SORT_4KG_(dbl_mb(k_aux),dbl_mb(k_loc_ggaa),
     &   nalength(azone2),int_mb(k_range+g3b-1),
     &   nalength(azone1),int_mb(k_range+g1b-1),
     &   4,2,3,1,1.0d0)
c
         if (.not.ma_pop_stack(l_aux))
     1   call errquit('g4ind:MA1yy7',15,MA_ERR)
c delete l_step2
       if (.not.ma_pop_stack(l_step2))
     1   call errquit('g4ind:MA1d12',15,MA_ERR)
c
c
c
c
c
c DEBUG LM2
cx       write(6,1009)"iref g1b g3b az1 az2 ",iref,g1b,g3b,azone1,azone2
cx       do iii=1,size_loc_ggaa
cx       if (dabs(dbl_mb(k_loc_ggaa+iii-1)).gt.0.40d0) then
cx       write(6,1010) dbl_mb(k_loc_ggaa+iii-1),
cx     &               iii,iref,g1b,g3b,azone1,azone2
cx       endif
cx       enddo
cx       call util_flush(6)
ccx 1009  format(a24,5i5)
ccx 1010  format(5i5)
c
c
c
c
c ===================================================================
c k_loc_ggaa ready here  ============================================
c ===================================================================
c
c k_step1: ([g1b][g3b]|all_spinorb(all g2b),[az1])
c k_step2: ([g1b][g3b]|all_spinorb(all g2b),[az2])
c
c
c
       tot_azone1_sh=tot_zone(azone1)
       tot_azone2_sh=tot_zone(azone2)
c
        size_step1=int_mb(k_range+g1b-1)*int_mb(k_range+g3b-1)*
     1             n_spinorb*nalength(azone1)
        size_step2=int_mb(k_range+g1b-1)*int_mb(k_range+g3b-1)*
     1             n_spinorb*nalength(azone2)
c
c do loops pass1 pass2
c
       do ipass=1,2
c 
c
       if(ipass.eq.1) then !ipass 1
       if (.not.ma_push_get(mt_dbl,size_step1,'step1',
     1 l_step1,k_step1))
     1 call errquit('step3:30a',0,MA_ERR)
       else
       if (.not.ma_push_get(mt_dbl,size_step2,'step2',
     1 l_step2,k_step2))
     1 call errquit('step3:30b',0,MA_ERR)
       end if
c forming k_step1
       if(ipass.eq.1) then 
       if (.not.ma_push_get(mt_dbl,size_step1,'aux40',
     1  l_aux,k_aux))
     1 call errquit('step3:3',0,MA_ERR)
c OFFLOAD TARGET 3
       call dgemm('N','T',
     1  int_mb(k_range+g1b-1)*int_mb(k_range+g3b-1)*nalength(azone1),
     1  n_spinorb,
     1  nalength(azone2),
     1  1.0d0,dbl_mb(k_loc_ggaa),
     1  int_mb(k_range+g1b-1)*int_mb(k_range+g3b-1)*nalength(azone1),
     1  dbl_mb(k_movecs_sorted_t+tot_azone2_sh*n_spinorb),
     1  n_spinorb,0.0d0,
     1  dbl_mb(k_aux),
     1  int_mb(k_range+g1b-1)*int_mb(k_range+g3b-1)*nalength(azone1))
c
c *** DEBUG LM2 *** (g1 g3|az1 g2b all)
c        do g2b=1,noab+nvab  
c         im1shift=int_mb(k_range+g1b-1)*int_mb(k_range+g3b-1)
c     &            *nalength(azone1)*int_mb(k_offset+g2b-1) 
c         im2=int_mb(k_range+g1b-1)*int_mb(k_range+g3b-1)
c     &            *nalength(azone1)*int_mb(k_range+g2b-1)
c         do iii=1,im2
c       if (dabs(dbl_mb(k_aux+im1shift+iii-1)).gt.0.050d0) then
c       write(6,1010) dbl_mb(k_aux+im1shift+iii-1),
c     &               iii,iref,g1b,g3b,azone1,g2b
c       endif
c         enddo
c        enddo
c
c *** DEBUG LM2 ***
c      call ga_pgroup_sync(pgd)
c      call ga_sync()
c      stop
c *****************

c *****************
       CALL TCE_SORT_4KG_(dbl_mb(k_aux),dbl_mb(k_step1),
     &   int_mb(k_range+g1b-1),int_mb(k_range+g3b-1),
     &   nalength(azone1),n_spinorb,
     &   1,2,4,3,1.0d0)
       if (.not.ma_pop_stack(l_aux))
     1   call errquit('g4ind:MA1kl1',15,MA_ERR)
       end if !ipass 1
c forming k_step2
       if(ipass.eq.2) then !ipass 2
       if (.not.ma_push_get(mt_dbl,size_loc_ggaa,'aux40',
     1  l_aux,k_aux))
     1 call errquit('step3:3u',0,MA_ERR)
       CALL TCE_SORT_4KG_(dbl_mb(k_loc_ggaa),dbl_mb(k_aux),
     &   int_mb(k_range+g1b-1),int_mb(k_range+g3b-1),
     &   nalength(azone1),nalength(azone2),
     &   1,2,4,3,1.0d0)
c  now we have  ([g1b][g3b]|[az2][az1]): on k_aux
       if (.not.ma_push_get(mt_dbl,size_step2,'aux40',
     1  l_aux2,k_aux2))
     1 call errquit('step3:3w',0,MA_ERR)
c OFFLOAD TARGET 4
       call dgemm('N','T',
     1  int_mb(k_range+g1b-1)*int_mb(k_range+g3b-1)*nalength(azone2),
     1  n_spinorb,
     1  nalength(azone1),
     1  1.0d0,dbl_mb(k_aux),
     1  int_mb(k_range+g1b-1)*int_mb(k_range+g3b-1)*nalength(azone2),
     1  dbl_mb(k_movecs_sorted_t+tot_azone1_sh*n_spinorb),
     1  n_spinorb,0.0d0,
     1  dbl_mb(k_aux2),
     1  int_mb(k_range+g1b-1)*int_mb(k_range+g3b-1)*nalength(azone2))
c
       CALL TCE_SORT_4KG_(dbl_mb(k_aux2),dbl_mb(k_step2),
     &   int_mb(k_range+g1b-1),int_mb(k_range+g3b-1),
     &   nalength(azone2),n_spinorb,
     &   1,2,4,3,1.0d0)
       if (.not.ma_pop_stack(l_aux2))
     1   call errquit('g4ind:MA1pq3',15,MA_ERR)
       if (.not.ma_pop_stack(l_aux))
     1   call errquit('g4ind:MA1pq4',15,MA_ERR)
       end if !ipass 2
c
cc last step:
c
      do g4b=1,noab+nvab
c                                         (g1b g3b| n_spinorb(g2) az1)
       if(ipass.eq.1) then    ! ipass = 1 ############# k_step1
        size_4g_s1=int_mb(k_range+g1b-1)*int_mb(k_range+g3b-1)*
     1             n_spinorb*int_mb(k_range+g4b-1)
c open k_4g_s1
        if (.not.ma_push_get(mt_dbl,size_4g_s1,'step4g1',
     1  l_4g_s1,k_4g_s1))
     1  call errquit('step3:3x',0,MA_ERR)
c --- C_[azone1][g4]
        ii=0
        do igi4 =  1,int_mb(k_range+g4b-1)
        do inu1 =  1,nalength(azone1)
         ii = ii+1
         ipos1=(int_mb(k_offset+g4b-1)+igi4-1)*nbf+tot_azone1_sh
     &           +inu1
         dbl_mb(k_coeff+ii-1)=dbl_mb(k_movecs_sorted+ipos1-1)
        enddo
        enddo
c ---
       call dgemm('N','N',
     1  int_mb(k_range+g1b-1)*int_mb(k_range+g3b-1)*n_spinorb,
     1  int_mb(k_range+g4b-1),
     1  nalength(azone1),
     1  1.0d0,dbl_mb(k_step1),
     1  int_mb(k_range+g1b-1)*int_mb(k_range+g3b-1)*n_spinorb,
     1  dbl_mb(k_coeff),
     1  nalength(azone1),0.0d0,
     1  dbl_mb(k_4g_s1),
     1  int_mb(k_range+g1b-1)*int_mb(k_range+g3b-1)*n_spinorb)
c transposition of k_4g_s1(g1b,g3b,n_spinorb(all g2b),g4b)
c ==> k_aux(g1b,g3b,g4b,n_spinorb(all g2b)
        if (.not.ma_push_get(mt_dbl,size_4g_s1,'step4g2',
     1  l_aux,k_aux))
     1  call errquit('step3:3y',0,MA_ERR)
        CALL TCE_SORT_4KG_(dbl_mb(k_4g_s1),dbl_mb(k_aux),
     &   int_mb(k_range+g1b-1),int_mb(k_range+g3b-1),
     &   n_spinorb,int_mb(k_range+g4b-1),
     &   1,2,4,3,1.0d0)
c internal g2b loop  ipass = 1
        do g2b = g1b,noab+nvab
         if ((int_mb(k_spin+g3b-1).eq.int_mb(k_spin+g1b-1)).and.
     &    (int_mb(k_spin+g2b-1).eq.int_mb(k_spin+g4b-1))) then
         if (ieor(int_mb(k_sym+g1b-1),ieor(int_mb(k_sym+g3b-1)
     &    ,ieor(int_mb(k_sym+g2b-1),int_mb(k_sym+g4b-1)))) .eq.
     &    irrep_v) then
         if ((.not.restricted).or.(int_mb(k_spin+g3b-1)+
     &    int_mb(k_spin+g4b-1)
     &    +int_mb(k_spin+g1b-1)+int_mb(k_spin+g2b-1).ne.8)) then
c()()()()()() ipass 1
c DIRECT TERM ---->>> ipass 1
       if(g3b.le.g4b) then
        key_gggg=g2b - 1 + (noab+nvab) * (g1b - 1 +
     &  (noab+nvab) * (g4b - 1 + (noab+nvab) * (g3b - 1)))
        offset_aux=int_mb(k_range+g1b-1)*int_mb(k_range+g3b-1)*
     &             int_mb(k_range+g4b-1)*
     &             int_mb(k_offset+g2b-1)
        size_aux2=int_mb(k_range+g1b-1)*int_mb(k_range+g3b-1)*
     &            int_mb(k_range+g4b-1)*int_mb(k_range+g2b-1)
        call tce_hash(int_mb(k_v2_offset),key_gggg,offset_gggg)
        if (.not.ma_push_get(mt_dbl,size_aux2,'aux4g1',
     &  l_aux2,k_aux2))
     &  call errquit('step4:4a',0,MA_ERR)
        CALL TCE_SORT_4KG_(dbl_mb(k_aux+offset_aux),dbl_mb(k_aux2),
     &  int_mb(k_range+g1b-1),int_mb(k_range+g3b-1),
     &  int_mb(k_range+g4b-1),int_mb(k_range+g2b-1),
     &  4,1,3,2,1.0d0)
        call ga_acc(d_v2,offset_gggg+1,offset_gggg+size_aux2,1,1,
     1  dbl_mb(k_aux2),1,1.0d0)
        if (.not.ma_pop_stack(l_aux2))
     1    call errquit('g4ind:MA1ff6',15,MA_ERR)
       end if  ! direct term g3b<=g4b
c NEGATIVE TERM ---->>> ipass 1
       if(g3b.ge.g4b) then
          key_gggg=g2b - 1 + (noab+nvab) * (g1b - 1 +
     &    (noab+nvab) * (g3b - 1 + (noab+nvab) * (g4b - 1)))
          offset_aux=int_mb(k_range+g1b-1)*int_mb(k_range+g3b-1)*
     &             int_mb(k_range+g4b-1)*
     &             int_mb(k_offset+g2b-1)
          size_aux2=int_mb(k_range+g1b-1)*int_mb(k_range+g3b-1)*
     &            int_mb(k_range+g4b-1)*int_mb(k_range+g2b-1)
          call tce_hash(int_mb(k_v2_offset),key_gggg,offset_gggg)
          if (.not.ma_push_get(mt_dbl,size_aux2,'aux4g2',
     &    l_aux2,k_aux2))
     &    call errquit('step4:5a',0,MA_ERR)
          CALL TCE_SORT_4KG_(dbl_mb(k_aux+offset_aux),dbl_mb(k_aux2),
     &    int_mb(k_range+g1b-1),int_mb(k_range+g3b-1),
     &    int_mb(k_range+g4b-1),int_mb(k_range+g2b-1),
     &    4,1,2,3,1.0d0)
          call ga_acc(d_v2,offset_gggg+1,offset_gggg+size_aux2,1,1,
     1    dbl_mb(k_aux2),1,-1.0d0)
          if (.not.ma_pop_stack(l_aux2))
     1    call errquit('g4ind:MA1tt1',15,MA_ERR)
       end if
c()()()()()()

c
         endif !restricted
         endif !spin
         endif !sym
        enddo ! g2b
c
       if (.not.ma_pop_stack(l_aux))
     1   call errquit('g4ind:MAx2',15,MA_ERR)
c close k_4g_s1
       if (.not.ma_pop_stack(l_4g_s1))
     1   call errquit('g4ind:MAx1',15,MA_ERR)
       endif ! ipass 1
c 
c
c THINGS TO DO : azone1=azone2 case in ipass=2
c
c
c                                          (g1b g3b| n_spinorb(g2) az2)
       if(ipass.eq.2) then    ! ipass = 2 ############ k_step2
       if(azone1.ne.azone2) then
        size_4g_s1=int_mb(k_range+g1b-1)*int_mb(k_range+g3b-1)*
     1             n_spinorb*int_mb(k_range+g4b-1)
c open k_4g_s1
        if (.not.ma_push_get(mt_dbl,size_4g_s1,'step4g1',
     1  l_4g_s1,k_4g_s1))
     1 call errquit('step3:3z',0,MA_ERR)
c --- C_[azone2][g4]
        ii=0
        do igi4 =  1,int_mb(k_range+g4b-1)
        do imu1 =  1,nalength(azone2)
         ii = ii+1
         ipos1=(int_mb(k_offset+g4b-1)+igi4-1)*nbf+tot_azone2_sh
     &           +imu1
         dbl_mb(k_coeff+ii-1)=dbl_mb(k_movecs_sorted+ipos1-1)
        enddo
        enddo
c ---
       call dgemm('N','N',
     1  int_mb(k_range+g1b-1)*int_mb(k_range+g3b-1)*n_spinorb,
     1  int_mb(k_range+g4b-1),
     1  nalength(azone2),
     1  1.0d0,dbl_mb(k_step2),
     1  int_mb(k_range+g1b-1)*int_mb(k_range+g3b-1)*n_spinorb,
     1  dbl_mb(k_coeff),
     1  nalength(azone2),0.0d0,
     1  dbl_mb(k_4g_s1),
     1  int_mb(k_range+g1b-1)*int_mb(k_range+g3b-1)*n_spinorb)
c transposition of k_4g_s1(g1b,g3b,n_spinorb(all g2b),g4b)
c ==> k_aux(g1b,g3b,g4b,n_spinorb(all g2b)
        if (.not.ma_push_get(mt_dbl,size_4g_s1,'step4g2',
     1  l_aux,k_aux))
     1 call errquit('step3:3z1',0,MA_ERR)
       CALL TCE_SORT_4KG_(dbl_mb(k_4g_s1),dbl_mb(k_aux),
     &   int_mb(k_range+g1b-1),int_mb(k_range+g3b-1),
     &   n_spinorb,int_mb(k_range+g4b-1),
     &   1,2,4,3,1.0d0)
c internal g2b loop  ipass = 2
        do g2b = g1b,noab+nvab
         if ((int_mb(k_spin+g3b-1).eq.int_mb(k_spin+g1b-1)).and.
     &    (int_mb(k_spin+g2b-1).eq.int_mb(k_spin+g4b-1))) then
         if (ieor(int_mb(k_sym+g1b-1),ieor(int_mb(k_sym+g3b-1)
     &    ,ieor(int_mb(k_sym+g2b-1),int_mb(k_sym+g4b-1)))) .eq.
     &    irrep_v) then
         if ((.not.restricted).or.(int_mb(k_spin+g3b-1)+
     &    int_mb(k_spin+g4b-1)
     &    +int_mb(k_spin+g1b-1)+int_mb(k_spin+g2b-1).ne.8)) then
c()()()()()() ipass 2
c DIRECT TERM ---->>> ipass 2
       if(g3b.le.g4b) then
        key_gggg=g2b - 1 + (noab+nvab) * (g1b - 1 +
     &  (noab+nvab) * (g4b - 1 + (noab+nvab) * (g3b - 1)))
        offset_aux=int_mb(k_range+g1b-1)*int_mb(k_range+g3b-1)*
     &             int_mb(k_range+g4b-1)*
     &             int_mb(k_offset+g2b-1)
        size_aux2=int_mb(k_range+g1b-1)*int_mb(k_range+g3b-1)*
     &            int_mb(k_range+g4b-1)*int_mb(k_range+g2b-1)
        call tce_hash(int_mb(k_v2_offset),key_gggg,offset_gggg)
        if (.not.ma_push_get(mt_dbl,size_aux2,'aux4g1',
     &  l_aux2,k_aux2))
     &  call errquit('step4:4a',0,MA_ERR)
        CALL TCE_SORT_4KG_(dbl_mb(k_aux+offset_aux),dbl_mb(k_aux2),
     &  int_mb(k_range+g1b-1),int_mb(k_range+g3b-1),
     &  int_mb(k_range+g4b-1),int_mb(k_range+g2b-1),
     &  4,1,3,2,1.0d0)
        call ga_acc(d_v2,offset_gggg+1,offset_gggg+size_aux2,1,1,
     1  dbl_mb(k_aux2),1,1.0d0)
        if (.not.ma_pop_stack(l_aux2))
     1    call errquit('g4ind:MA1h1',15,MA_ERR)
       end if  ! direct term g3b<=g4b
c NEGATIVE TERM ---->>> ipass 2
       if(g3b.ge.g4b) then
          key_gggg=g2b - 1 + (noab+nvab) * (g1b - 1 +
     &    (noab+nvab) * (g3b - 1 + (noab+nvab) * (g4b - 1)))
          offset_aux=int_mb(k_range+g1b-1)*int_mb(k_range+g3b-1)*
     &             int_mb(k_range+g4b-1)*
     &             int_mb(k_offset+g2b-1)
          size_aux2=int_mb(k_range+g1b-1)*int_mb(k_range+g3b-1)*
     &            int_mb(k_range+g4b-1)*int_mb(k_range+g2b-1)
          call tce_hash(int_mb(k_v2_offset),key_gggg,offset_gggg)
          if (.not.ma_push_get(mt_dbl,size_aux2,'aux4g2',
     &    l_aux2,k_aux2))
     &    call errquit('step4:5a',0,MA_ERR)
          CALL TCE_SORT_4KG_(dbl_mb(k_aux+offset_aux),dbl_mb(k_aux2),
     &    int_mb(k_range+g1b-1),int_mb(k_range+g3b-1),
     &    int_mb(k_range+g4b-1),int_mb(k_range+g2b-1),
     &    4,1,2,3,1.0d0)
          call ga_acc(d_v2,offset_gggg+1,offset_gggg+size_aux2,1,1,
     1    dbl_mb(k_aux2),1,-1.0d0)
          if (.not.ma_pop_stack(l_aux2))
     1    call errquit('g4ind:MA1h2',15,MA_ERR)
       end if
c()()()()()()
         endif !restricted
         endif !spin
         endif !sym
        enddo ! g2b
c
       if (.not.ma_pop_stack(l_aux))
     1   call errquit('g4ind:MAx2',15,MA_ERR)
c close k_4g_s1
       if (.not.ma_pop_stack(l_4g_s1))
     1   call errquit('g4ind:MAx1',15,MA_ERR)
       endif ! azone1 ne azone2
       endif ! ipass 2
      enddo ! g4b
c
      if(ipass.ne.1) then
       if (.not.ma_pop_stack(l_step2))
     1   call errquit('g4ind:MA1wr1',15,MA_ERR)
      else
       if (.not.ma_pop_stack(l_step1))
     1   call errquit('g4ind:MA1wr2',15,MA_ERR)
      end if
c
c do loops pass1 pass2
c
      enddo 
c
       if (.not.ma_pop_stack(l_loc_ggaa))
     1 call errquit('g4ind:M1c12',15,MA_ERR)
c
c DONE 
      if(lusesub) then
        next = NXTASKsub(nprocs,1,pgd)
      else
        next = NXTASK(nprocs, 1)
      endif
      ENDIF
      count = count + 1
      ENDIF !spin
      ENDDO !g1b
      ENDDO !g3b
      ENDDO !azone1
      ENDDO !azone2
      if(lusesub) then
        next = NXTASKsub(-nprocs,1,pgd)
        call ga_pgroup_sync(pgd)
      else
        next = NXTASK(-nprocs,1)
        call ga_sync()
      endif
c
c     delete d_4af
      call deletefile(d_4af) !subgroups
c delete k_movecs_sorted_t
      if (.not.ma_pop_stack(l_movecs_sorted_t))
     1  call errquit('tcc_off_4a: MA problem',15,MA_ERR)
c
      if (.not.ma_pop_stack(l_coeff))
     1  call errquit('tcc_coeff: MA problem',15,MA_ERR)
c
      if (.not.ma_pop_stack(l_work2))
     1  call errquit('tcc_ao2e2: MA problem',14,MA_ERR)
c
      if (.not.ma_pop_stack(l_work1))
     1  call errquit('tcc_ao2e1: MA problem',15,MA_ERR)
c
      if (.not.ma_pop_stack(l_4af_offset))
     1  call errquit('ga4ind:4a',15,MA_ERR)
c
CCC DEBUG LM2
c 1009  format(a24,5i5)
c 1010  format(f16.8,6i5)
c
      RETURN
      END
c =================================================================
